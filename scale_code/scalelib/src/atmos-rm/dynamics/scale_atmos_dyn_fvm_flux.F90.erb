% # -*- f90 -*-
% # vi: set sw=4 ts=8:
<%
 order = [ ["ud1",1], ["cd2",1], ["ud3",2], ["ud3Koren1993",2], ["cd4",2], ["ud5",3], ["cd6",3], ["ud7",4], ["cd8",4] ]
%>
!-------------------------------------------------------------------------------
!> module scale_atmos_dyn_fvm_flux
!!
!! @par Description
!!          FVM flux scheme
!!
!! @author Team SCALE
!!
!<
!-------------------------------------------------------------------------------
#include "scalelib.h"
module scale_atmos_dyn_fvm_flux
  !-----------------------------------------------------------------------------
  !
  !++ used modules
  !
  use scale_precision
  use scale_io
  use scale_prof
  use scale_atmos_grid_cartesC_index
  use scale_index
  use scale_tracer
  use scale_prc
#ifdef DEBUG
  use scale_debug, only: &
     CHECK
  use scale_const, only: &
     UNDEF  => CONST_UNDEF, &
     IUNDEF => CONST_UNDEF2
#endif
  !-----------------------------------------------------------------------------
  implicit none
  private
  !-----------------------------------------------------------------------------
  !
  !++ Public procedure
  !
  public :: ATMOS_DYN_FVM_flux_setup

  abstract interface
     subroutine valueW( &
          valW, &
          mflx, val, GSQRT, &
          CDZ )
       use scale_precision
       use scale_atmos_grid_cartesC_index
       implicit none
       real(RP), intent(out) :: valW (KA)
       real(RP), intent(in)  :: mflx (KA)
       real(RP), intent(in)  :: val  (KA)
       real(RP), intent(in)  :: GSQRT(KA)
       real(RP), intent(in)  :: CDZ(KA)
     end subroutine valueW
     subroutine flux_phi( &
          flux, &
          mflx, val, GSQRT, &
          num_diff, &
          CDZ, &
          IIS, IIE, JJS, JJE )
       use scale_precision
       use scale_atmos_grid_cartesC_index
       implicit none
       real(RP), intent(inout) :: flux    (KA,IA,JA)
       real(RP), intent(in)  :: mflx    (KA,IA,JA)
       real(RP), intent(in)  :: val     (KA,IA,JA)
       real(RP), intent(in)  :: GSQRT   (KA,IA,JA)
       real(RP), intent(in)  :: num_diff(KA,IA,JA)
       real(RP), intent(in)  :: CDZ(KA)
       integer,  intent(in)  :: IIS, IIE, JJS, JJE
     end subroutine flux_phi
     subroutine flux_mom( &
          flux, &
          mom, val, DENS, &
          GSQRT, MAPF, &
          num_diff, &
          CDZ, TwoD, &
          IIS, IIE, JJS, JJE )
       use scale_precision
       use scale_atmos_grid_cartesC_index
       implicit none
       real(RP), intent(inout) :: flux    (KA,IA,JA)
       real(RP), intent(in)  :: mom     (KA,IA,JA)
       real(RP), intent(in)  :: val     (KA,IA,JA)
       real(RP), intent(in)  :: DENS    (KA,IA,JA)
       real(RP), intent(in)  :: GSQRT   (KA,IA,JA)
       real(RP), intent(in)  :: MAPF    (   IA,JA,2)
       real(RP), intent(in)  :: num_diff(KA,IA,JA)
       real(RP), intent(in)  :: CDZ(KA)
       logical,  intent(in)  :: TwoD
       integer,  intent(in)  :: IIS, IIE, JJS, JJE
     end subroutine flux_mom
     subroutine flux_z( &
          flux, &
          mom, val, DENS, &
          GSQRT, J33G, &
          num_diff, &
          CDZ, TwoD, &
          IIS, IIE, JJS, JJE )
       use scale_precision
       use scale_atmos_grid_cartesC_index
       implicit none
       real(RP), intent(inout) :: flux    (KA,IA,JA)
       real(RP), intent(in)  :: mom     (KA,IA,JA)
       real(RP), intent(in)  :: val     (KA,IA,JA)
       real(RP), intent(in)  :: DENS    (KA,IA,JA)
       real(RP), intent(in)  :: GSQRT   (KA,IA,JA)
       real(RP), intent(in)  :: J33G
       real(RP), intent(in)  :: num_diff(KA,IA,JA)
       real(RP), intent(in)  :: CDZ(KA)
       logical,  intent(in)  :: TwoD
       integer,  intent(in)  :: IIS, IIE, JJS, JJE
     end subroutine flux_z
     subroutine flux_wz( &
          flux, &
          mom, val, DENS, &
          GSQRT, J33G, &
          num_diff, &
          CDZ, FDZ, &
          dtrk, &
          IIS, IIE, JJS, JJE )
       use scale_precision
       use scale_atmos_grid_cartesC_index
       implicit none
       real(RP), intent(inout) :: flux    (KA,IA,JA)
       real(RP), intent(in)  :: mom     (KA,IA,JA)
       real(RP), intent(in)  :: val     (KA,IA,JA)
       real(RP), intent(in)  :: DENS    (KA,IA,JA)
       real(RP), intent(in)  :: GSQRT   (KA,IA,JA)
       real(RP), intent(in)  :: J33G
       real(RP), intent(in)  :: num_diff(KA,IA,JA)
       real(RP), intent(in)  :: CDZ(KA)
       real(RP), intent(in)  :: FDZ(KA-1)
       real(RP), intent(in)  :: dtrk
       integer,  intent(in)  :: IIS, IIE, JJS, JJE
     end subroutine flux_wz
     subroutine flux_j( &
          flux, &
          mom, val, DENS, &
          GSQRT, JG, MAPF, &
          CDZ, TwoD, &
          IIS, IIE, JJS, JJE )
       use scale_precision
       use scale_atmos_grid_cartesC_index
       implicit none
       real(RP), intent(inout) :: flux    (KA,IA,JA)
       real(RP), intent(in)  :: mom     (KA,IA,JA)
       real(RP), intent(in)  :: val     (KA,IA,JA)
       real(RP), intent(in)  :: DENS    (KA,IA,JA)
       real(RP), intent(in)  :: GSQRT   (KA,IA,JA)
       real(RP), intent(in)  :: JG      (KA,IA,JA)
       real(RP), intent(in)  :: MAPF    (   IA,JA,2)
       real(RP), intent(in)  :: CDZ(KA)
       logical,  intent(in)  :: TwoD
       integer,  intent(in)  :: IIS, IIE, JJS, JJE
     end subroutine flux_j
  end interface

#ifndef _OPENACC
  procedure(valueW), pointer :: ATMOS_DYN_FVM_flux_valueW_Z => NULL()
#endif
  public :: ATMOS_DYN_FVM_flux_valueW_Z

<% ["Z", "X", "Y"].each do |dir| %>
  procedure(flux_phi), pointer :: ATMOS_DYN_FVM_flux<%=dir%>_XYZ => NULL()
  public :: ATMOS_DYN_FVM_flux<%=dir%>_XYZ
  procedure(flux_phi), pointer :: ATMOS_DYN_FVM_flux<%=dir%>_XYZ_tracer => NULL()
  public :: ATMOS_DYN_FVM_flux<%=dir%>_XYZ_tracer
<% end %>

<% ["XYW", "UYZ", "XVZ"].each do |uvw| %>
  procedure(<%= uvw=="XYW" ? "flux_wz" : "flux_z" %>), pointer :: ATMOS_DYN_FVM_fluxZ_<%=uvw%> => NULL()
  public :: ATMOS_DYN_FVM_fluxZ_<%=uvw%>
  procedure(<%= uvw=="XYW" ? "flux_wz" : "flux_z" %>), pointer :: ATMOS_DYN_FVM_fluxZ_<%=uvw%>_tracer => NULL()
  public :: ATMOS_DYN_FVM_fluxZ_<%=uvw%>_tracer
<% ["X", "Y"].each do |dir| %>
  procedure(flux_mom), pointer :: ATMOS_DYN_FVM_flux<%=dir%>_<%=uvw%> => NULL()
  public :: ATMOS_DYN_FVM_flux<%=dir%>_<%=uvw%>
  procedure(flux_mom), pointer :: ATMOS_DYN_FVM_flux<%=dir%>_<%=uvw%>_tracer => NULL()
  public :: ATMOS_DYN_FVM_flux<%=dir%>_<%=uvw%>_tracer
<% end %>
<% ["J13", "J23"].each do |dir| %>
  procedure(flux_j), pointer :: ATMOS_DYN_FVM_flux<%=dir%>_<%=uvw%> => NULL()
  public :: ATMOS_DYN_FVM_flux<%=dir%>_<%=uvw%>
  procedure(flux_j), pointer :: ATMOS_DYN_FVM_flux<%=dir%>_<%=uvw%>_tracer => NULL()
  public :: ATMOS_DYN_FVM_flux<%=dir%>_<%=uvw%>_tracer
<% end %>
<% end %>

  !-----------------------------------------------------------------------------
  !
  !++ Public parameters & variables
  !
  !-----------------------------------------------------------------------------
  !
  !++ Private procedure
  !
  !-----------------------------------------------------------------------------
  !
  !++ Private parameters & variables
  !
#ifdef _OPENACC
<% order.each_with_index do |ary, i| %>
  integer, parameter :: I_<%=ary[0].upcase%> = <%=i+1%>
<% end %>
  integer :: i_scheme
  !$acc declare create(i_scheme)
#endif
  !-----------------------------------------------------------------------------
contains
  
  !-----------------------------------------------------------------------------
  !> setup
  subroutine ATMOS_DYN_FVM_flux_setup( &
       scheme, scheme_tracer )
    use scale_prc, only: &
         PRC_abort
    use scale_prc_cartesC, only: &
         PRC_TwoD
<%
  funcs = Array.new
  funcs.push [ "ATMOS_DYN_FVM_flux_valueW_Z",
    [ ["real(RP), intent(out)", "valW (KA)"],
      ["real(RP), intent(in) ", "mflx (KA)"],
      ["real(RP), intent(in) ", "val  (KA)"],
      ["real(RP), intent(in) ", "GSQRT(KA)"],
      ["real(RP), intent(in) ", "CDZ  (KA)"] ]
  ]
  ["Z", "X", "Y"].each do |dir|
    funcs.push [ "ATMOS_DYN_FVM_flux#{dir}_XYZ", nil ]
  end
  ["XYW", "UYZ", "XVZ"].each do |uvw|
    ["Z", "X", "Y", "J13", "J23"].each do |dir|
      funcs.push [ "ATMOS_DYN_FVM_flux#{dir}_#{uvw}", nil ]
    end
  end
%>
<% order.each do |o, nh| %>
   use scale_atmos_dyn_fvm_flux_<%=o%>, only: &
      <%= funcs.map{|a| "#{a[0]}_#{o}"}.join(", &\n      ") %>
<% end %>
    implicit none
    character(len=*), intent(in) :: scheme
    character(len=*), intent(in) :: scheme_tracer

    select case( scheme )
<%   order.each_with_index do |ary, i|
       o = ary[0]
       nh = ary[1]
%>
    case( "<%= o.upcase %>" )
      LOG_INFO("ATMOS_DYN_FVM_flux_setup",*) 'the <%=o%> scheme is used for flux calculation'
<% funcs.each do |func, args|
     if args %>
#ifdef _OPENACC
      i_scheme = <%= i+1 %>
#else
<%   end %>
      <%= func %> => <%= func %>_<%= o %>
<%   if args %>
#endif
<%   end
   end %>

      if ( ( .not. PRC_TwoD ) .and. IHALO < <%=nh%> ) then
         LOG_ERROR("ATMOS_DYN_FVM_flux_setup",*) 'IHALO must be >= ', <%=nh%>
         call PRC_abort
      end if
      if ( JHALO < <%=nh%> ) then
         LOG_ERROR("ATMOS_DYN_FVM_flux_setup",*) 'JHALO must be >= ', <%=nh%>
         call PRC_abort
      end if

<% end %>
    case default
       LOG_ERROR("ATMOS_DYN_FVM_flux_setup",*) 'scheme is invalid: ', scheme
       call PRC_abort
    end select

    !$acc update device(i_scheme)

    select case( scheme_tracer )
<%   order.each do |o, nh| %>
    case( "<%= o.upcase %>" )
      LOG_INFO("ATMOS_DYN_FVM_flux_setup",*) 'the <%=o%> scheme is used for flux calculation of tracer'
<% funcs.each do |func, args|
     unless args %>
      <%= func %>_tracer => <%= func %>_<%= o %>
<%   end
   end %>

      if ( ( .not. PRC_TwoD ) .and. IHALO < <%=nh%> ) then
         LOG_ERROR("ATMOS_DYN_FVM_flux_setup",*) 'IHALO must be >= ', <%=nh%>
         call PRC_abort
      end if
      if ( JHALO < <%=nh%> ) then
         LOG_ERROR("ATMOS_DYN_FVM_flux_setup",*) 'JHALO must be >= ', <%=nh%>
         call PRC_abort
      end if

<% end %>
    case default
       LOG_ERROR("ATMOS_DYN_FVM_flux_setup",*) 'scheme is invalid: ', scheme_tracer
       call PRC_abort
    end select

  end subroutine ATMOS_DYN_FVM_flux_setup

#ifdef _OPENACC
<% funcs.each do |func, args|
  next unless args
  arg = args.map{|a| a[1].sub(/\s*\(\w+\)$/,"") }.join(", ") %>
  subroutine <%=func%>( <%=arg%> )
    !$acc routine vector
<% order.each do |o, nh| %>
   use scale_atmos_dyn_fvm_flux_<%=o%>, only: &
      <%=func%>_<%=o%>
<% end %>
    implicit none
<% args.each do |a| %>
    <%=a[0]%> :: <%=a[1]%>
<% end %>

    select case ( i_scheme )
<% order.each_with_index do |ary, i| %>
    case( <%=i+1%> )
      call <%=func%>_<%=ary[0]%>( <%=arg%> )
<% end %>
    end select

    return
  end subroutine <%=func%>
<% end %>
#endif

end module scale_atmos_dyn_fvm_flux

!--
! vi<%=":"%>set readonly sw=4 ts=8
!
!Local Variables<%=":"%>
!mode: f90
!buffer-read-only: t
!End:
!
!++
